package com.example.app_tracker.app_backend.entity;

import java.time.LocalDateTime;

import org.hibernate.annotations.CreationTimestamp;

import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "applications")
public class App {
    
    @Id
    @Column(name = "id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int appId;

    @Column(name = "company", nullable = false, length = 50)
    private String companyName;

    @Column(name = "position", nullable = false, length = 250)
    private String positionName;

    @Column(name = "postion_id", length = 20)
    private String positionId;

    @Column(name = "location", length = 35)
    private String location;

    @Column(name = "application_date")
    @CreationTimestamp
    @JsonFormat(pattern="MM-dd-yyyy HH:mm:ss")
    private LocalDateTime applicationDate;

    @Column(name = "rejection")
    private boolean rejected;

    @Column(name ="first_interview")
    private boolean firstInterview;

    @Column(name = "second_interview")
    private boolean secondInterview;

    // constructor to set the rejection and interview status to false
    public App(String companyName, String positionName, String positionId, String location) {
        this.companyName = companyName;
        this.positionName = positionName;
        this.positionId = positionId;
        this.location = location;
        this.applicationDate = LocalDateTime.now();
        this.rejected = false;
        this.firstInterview = false;
        this.secondInterview = false;
    }

    // for some reason, these are not automatically generated by @getter and @setter?
    public boolean getRejected() {
        return rejected;
    }

    public boolean getFirstInterview() {
        return firstInterview;
    }

    public boolean getSecondInterview() {
        return secondInterview;
    }

    public void setRejected(boolean rejection) {
        this.rejected = rejection;
    }

    public void setFirstInterview(boolean bool) {
        this.firstInterview = bool;
    }

    public void setSecondInterview(boolean bool) {
        this.secondInterview = bool;
    }

    private String readOut(boolean rejected) {
        if (rejected) {
            return "has been rejected.";
        } else {
            return "has not yet been rejected.";
        }
    }

    @Override
    public String toString() {
        return "Application with " + getCompanyName() + " for the position " + getPositionName() + " " + readOut(rejected);
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((companyName == null) ? 0 : companyName.hashCode());
        result = prime * result + ((positionName == null) ? 0 : positionName.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        App other = (App) obj;
        if (companyName == null) {
            if (other.companyName != null)
                return false;
        } else if (!companyName.equals(other.companyName))
            return false;
        if (positionName == null) {
            if (other.positionName != null)
                return false;
        } else if (!positionName.equals(other.positionName))
            return false;
        return true;
    }

    

}
